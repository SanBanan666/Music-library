# Музыкальная Библиотека (Go-Tunes)

## Описание проекта
Go-Tunes - это REST API сервис для управления музыкальной библиотекой, разработанный на языке Go. Сервис предоставляет возможность хранить и получать информацию о песнях, включая тексты, даты выпуска и ссылки.

## Автор
Бабамуродов Азиз

## Технологии
- Go 1.22.2
- Gin Web Framework
- GORM (ORM для работы с базой данных)
- PostgreSQL
- Swagger для документации API

## Основные возможности
- Получение информации о песнях
- Поиск песен по различным параметрам
- Пагинация результатов
- Фильтрация по группе, названию песни, дате выпуска
- Добавление новых песен
- Обновление существующих записей
- Удаление песен

## Структура проекта
```
.
├── cmd/            # Точка входа в приложение
├── config/         # Конфигурационные файлы
├── controllers/    # Обработчики HTTP-запросов
├── database/       # Настройки и подключение к базе данных
├── docs/          # Документация
├── models/        # Модели данных
└── repository/    # Слой доступа к данным
```

## API Endpoints
- `GET /info` - Получение информации о конкретной песне
- `GET /songs` - Получение списка песен с возможностью фильтрации и пагинации
- `GET /songs/text` - Получение текстов песен с пагинацией
- `PUT /songs` - Обновление информации о песне
- `DELETE /songs` - Удаление песни

## Установка и запуск

### Предварительные требования
- Go 1.22.2 или выше
- PostgreSQL
- Make (опционально)

### Установка зависимостей
```bash
go mod download
```

### Настройка базы данных
1. Создайте базу данных PostgreSQL
2. Настройте переменные окружения в файле `.env`

### Запуск приложения
```bash
make run
```
или
```bash
go run cmd/api/main.go
```

## Документация API
Swagger документация доступна по адресу: `http://localhost:8080/swagger/index.html`

## Инструкция по использованию

### 1. Получение информации о песне
```bash
curl "http://localhost:8080/info?group=НазваниеГруппы&song=НазваниеПесни"
```

### 2. Получение списка песен
```bash
# Базовый запрос
curl "http://localhost:8080/songs"

# С фильтрацией
curl "http://localhost:8080/songs?group=НазваниеГруппы&song=НазваниеПесни"

# С пагинацией
curl "http://localhost:8080/songs?page=1&limit=10"
```

### 3. Получение текстов песен
```bash
curl "http://localhost:8080/songs/text?page=1&limit=10"
```

### 4. Обновление информации о песне
```bash
curl -X PUT "http://localhost:8080/songs" \
     -H "Content-Type: application/json" \
     -d '{
           "id": 1,
           "group": "НоваяГруппа",
           "song": "НоваяПесня",
           "release_date": "2024-03-20",
           "text": "Новый текст песни",
           "link": "https://example.com/song"
         }'
```

### 5. Удаление песни
```bash
curl -X DELETE "http://localhost:8080/songs?id=1"
```

### Примеры использования с фильтрацией

1. Поиск по группе:
```bash
curl "http://localhost:8080/songs?group=НазваниеГруппы"
```

2. Поиск по названию песни:
```bash
curl "http://localhost:8080/songs?song=НазваниеПесни"
```

3. Поиск по дате выпуска:
```bash
curl "http://localhost:8080/songs?release_date=2024-03-20"
```

4. Комбинированный поиск:
```bash
curl "http://localhost:8080/songs?group=НазваниеГруппы&song=НазваниеПесни&release_date=2024-03-20"
```

### Примечания по использованию
- Все даты должны быть в формате YYYY-MM-DD
- При пагинации параметр `page` начинается с 1
- Максимальное количество результатов на странице можно настроить через параметр `limit`
- Поиск по тексту и названию группы нечувствителен к регистру
- При обновлении песни все поля являются опциональными, кроме `id`

## Лицензия
MIT
